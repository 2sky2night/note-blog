import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.273ff57c.js";const u=JSON.parse('{"title":"SSE","description":"","frontmatter":{},"headers":[],"relativePath":"question/node/03.md","filePath":"question/node/03.md","lastUpdated":1699188084000}'),p={name:"question/node/03.md"},o=l(`<h1 id="sse" tabindex="-1">SSE <a class="header-anchor" href="#sse" aria-label="Permalink to &quot;SSE&quot;">​</a></h1><h2 id="什么是-sse" tabindex="-1">什么是 SSE <a class="header-anchor" href="#什么是-sse" aria-label="Permalink to &quot;什么是 SSE&quot;">​</a></h2><p>​ SSE(Server Sent Event) 既是服务端发送消息，是一种轻量级长连接协议，和 websocket 不同，socket 可以双端接受发送消息，而 SSE 只能由服务端发送消息,并且 SSE 自动会重连.</p><p>从“服务端主动向浏览器实时推送消息”这一点来看，该 API 与 WebSockets API 有一些相似之处。但是，该 API 与 WebSockers API 的不同之处在于：</p><table><thead><tr><th>Server-Sent Events API</th><th>WebSockets API</th></tr></thead><tbody><tr><td>基于 HTTP 协议</td><td>基于 TCP 协议</td></tr><tr><td>单工，只能服务端单向发送消息</td><td>全双工，可以同时发送和接收消息</td></tr><tr><td>轻量级，使用简单</td><td>相对复杂</td></tr><tr><td>内置断线重连和消息追踪的功能</td><td>不在协议范围内，需手动实现</td></tr><tr><td>文本或使用 Base64 编码和 gzip 压缩的二进制消息</td><td>类型广泛</td></tr><tr><td>支持<strong>自定义</strong>事件类型</td><td>不支持自定义事件类型</td></tr><tr><td>连接数 HTTP/1.1 6 个，HTTP/2 可协商（默认 100）</td><td>连接数无限制</td></tr></tbody></table><p>​ 服务器发送事件（SSE）受到打开连接数的限制，这个限制是<em>对于浏览器</em>的，并且设置为非常低的数字（6），打开多个选项卡时可能会特别痛苦。</p><p>​ SSE 应用场景：ChatGPT.</p><p>ChatGPT 这种需要耗费大量时间计算才能得到最终结果,不适用与 Ajax,因为 Ajax 只能一次请求响应一次结果,也就是说要想得到完整数据,就必须等待 GPT 把全部的计算完成才能返回,中间可能会耗费很多时间.</p><h2 id="sse-浏览器上使用" tabindex="-1">SSE 浏览器上使用 <a class="header-anchor" href="#sse-浏览器上使用" aria-label="Permalink to &quot;SSE 浏览器上使用&quot;">​</a></h2><p>使用浏览器提供的<code>EventSource</code>来完成 SSE 通信,简单易用.通过<code>addEventListener</code>来实现自定义事件的监听,回调可以接受一个参数,这个参数就是服务端响应的数据.</p><p><code>EventSource</code>内置了三种事件：</p><p><code>open</code> ：连接成功就触发</p><p><code>error</code> :出错或关闭时触发</p><p><code>message</code>:服务端响应的 SSE 报文数据中 event 字段为<code>message</code>或无 evetn 字段就触发该事件回调。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">http-equiv</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;X-UA-Compatible&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;IE=edge&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Document&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;你好&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;开启连接&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;断开连接&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">end</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementsByTagName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;button&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> end.nextElementSibling;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> eventSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startSSE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        eventSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventSource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/stream&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        eventSource.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;customEvent&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">li</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;li&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">          li.innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(event.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">          list.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(li);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        eventSource.</span><span style="color:#B392F0;">onopen</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SSE连接成功!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        eventSource.</span><span style="color:#B392F0;">onerror</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SSE连接失败!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">closeSSE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (eventSource) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          eventSource.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;关闭连接!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      start.onclick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> startSSE;</span></span>
<span class="line"><span style="color:#E1E4E8;">      end.onclick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> closeSSE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">http-equiv</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;X-UA-Compatible&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;IE=edge&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Document&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;你好&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;开启连接&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;断开连接&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">start</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">end</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementsByTagName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;button&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> end.nextElementSibling;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> eventSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startSSE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        eventSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventSource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/stream&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        eventSource.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;customEvent&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">li</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;li&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">          li.innerText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(event.data);</span></span>
<span class="line"><span style="color:#24292E;">          list.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(li);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        eventSource.</span><span style="color:#6F42C1;">onopen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SSE连接成功!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        eventSource.</span><span style="color:#6F42C1;">onerror</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SSE连接失败!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">closeSSE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (eventSource) {</span></span>
<span class="line"><span style="color:#24292E;">          eventSource.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;关闭连接!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      start.onclick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> startSSE;</span></span>
<span class="line"><span style="color:#24292E;">      end.onclick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> closeSSE;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="sse-服务端上使用" tabindex="-1">SSE 服务端上使用 <a class="header-anchor" href="#sse-服务端上使用" aria-label="Permalink to &quot;SSE 服务端上使用&quot;">​</a></h2><h3 id="sse-的响应头部的设置" tabindex="-1">SSE 的响应头部的设置 <a class="header-anchor" href="#sse-的响应头部的设置" aria-label="Permalink to &quot;SSE 的响应头部的设置&quot;">​</a></h3><p>​ 首先 SSE 协议的报文必须要设置的响应头部为<code>content-type</code> <code>cache-control</code> <code>connection</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Content-Type: text/event-stream</span></span>
<span class="line"><span style="color:#e1e4e8;">Cache-Control: no-cache</span></span>
<span class="line"><span style="color:#e1e4e8;">Connection: keep-alive</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Content-Type: text/event-stream</span></span>
<span class="line"><span style="color:#24292e;">Cache-Control: no-cache</span></span>
<span class="line"><span style="color:#24292e;">Connection: keep-alive</span></span></code></pre></div><blockquote><p>SSE API 规定推送事件流的 MIME 类型为 <code>text/event-stream</code>。</p><p>必须指定浏览器不缓存服务端发送的数据，以确保浏览器可以实时显示服务端发送的数据。</p><p>SSE 是一个一直保持开启的 TCP 连接，所以 Connection 为 keep-alive。</p></blockquote><h3 id="sse-报文消息格式" tabindex="-1">SSE 报文消息格式 <a class="header-anchor" href="#sse-报文消息格式" aria-label="Permalink to &quot;SSE 报文消息格式&quot;">​</a></h3><p>EventStream（事件流）为 <code>UTF-8</code> 格式编码的<code>文本</code>或使用 Base64 编码和 gzip 压缩的二进制消息。</p><p>​ 每条消息由一行或多行字段（<code>event</code>、<code>id</code>、<code>retry</code>、<code>data</code>）组成，每个字段组成形式为：<code>字段名:字段值</code>。字段以行为单位，每行一个（即以 <code>\\n</code> 结尾）。以<code>冒号</code>开头的行为注释行，会被浏览器忽略。</p><p>​ 每次推送，可由多个消息组成，每个消息之间以空行分隔（即最后一个字段以<code>\\n\\n</code>结尾）。</p><blockquote><p>📢 注意：</p><ul><li>除上述四个字段外，其他所有字段都会被忽略。</li><li>如果一行字段中不包含冒号，则整行文本将被视为字段名，字段值为空。</li><li>注释行可以用来防止链接超时，服务端可以定期向浏览器发送一条消息注释行，以保持连接不断。</li></ul></blockquote><h4 id="_1-event" tabindex="-1">1. event <a class="header-anchor" href="#_1-event" aria-label="Permalink to &quot;1. event&quot;">​</a></h4><p>​ 事件类型。如果指定了该字段，则在浏览器收到该条消息时，会在当前 <code>EventSource</code> 对象（见 4）上触发一个事件，事件类型就是该字段的字段值。可以使用 <code>addEventListener</code> 方法在当前 <code>EventSource</code> 对象上监听任意类型的命名事件。</p><p>​ 如果该条消息没有 <code>event</code> 字段，则会触发 <code>EventSource</code> 对象 <code>onmessage</code> 属性上的事件处理函数。如果接收消息中有一个 event 字段，触发的事件与 event 字段的值相同。如果不存在 event 字段，则将触发通用的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource/message_event" target="_blank" rel="noreferrer"><code>message</code></a> 事件</p><h4 id="_2-id" tabindex="-1">2. id <a class="header-anchor" href="#_2-id" aria-label="Permalink to &quot;2. id&quot;">​</a></h4><p>​ 事件 ID。事件的唯一标识符，浏览器会跟踪事件 ID，如果发生断连，浏览器会把收到的最后一个事件 ID 放到 HTTP Header <code>Last-Event-Id</code> 中进行重连，作为一种简单的同步机制。</p><p>​ 例如可以在服务端将每次发送的事件 ID 值自动加 1，当浏览器接收到该事件 ID 后，下次与服务端建立连接后再请求的 Header 中将同时提交该事件 ID，服务端检查该事件 ID 是否为上次发送的事件 ID，如果与上次发送的事件 ID 不一致则说明浏览器存在与服务器连接失败的情况，本次需要同时发送前几次浏览器未接收到的数据。</p><h4 id="_3-retry" tabindex="-1">3. retry <a class="header-anchor" href="#_3-retry" aria-label="Permalink to &quot;3. retry&quot;">​</a></h4><p>​ 重连时间。整数值，单位 ms，如果与服务器的连接丢失，浏览器将等待指定时间，然后尝试重新连接。如果该字段不是整数值，会被忽略。</p><p>​ 当服务端没有指定浏览器的重连时间时，由浏览器自行决定每隔多久与服务端建立一次连接（一般为 30s）。</p><h4 id="_4-data" tabindex="-1">4. data <a class="header-anchor" href="#_4-data" aria-label="Permalink to &quot;4. data&quot;">​</a></h4><p>​ 消息数据。数据内容只能以一个字符串的文本形式进行发送，如果需要发送一个对象时，需要将该对象以一个 JSON 格式的字符串的形式进行发送。在浏览器接收到该字符串后，再把它还原为一个 JSON 对象。</p><h3 id="sse-报文示例" tabindex="-1">SSE 报文示例 <a class="header-anchor" href="#sse-报文示例" aria-label="Permalink to &quot;SSE 报文示例&quot;">​</a></h3><p>​ 如下事件流示例，共发送了 4 条消息，每条消息间以一个空行<code>\\n\\n</code>作为分隔符。每条消息中的字段以<code>\\n</code>分割。</p><p>​ 第一条仅仅是个注释，因为它以冒号开头。</p><p>​ 第二条消息只包含一个 data 字段，值为 &#39;this is second message&#39;。</p><p>​ 第三条消息包含两个 data 字段，其会被解析为一个字段，值为 &#39;this is third message part 1\\nthis is third message part 2&#39;。</p><p>​ 第四条消息包含完整四个字段，指定了事件类型为 &#39;server-time&#39;，事件 id 为 &#39;1&#39;，重连时间为 &#39;30000&#39;ms，消息数据为 <code>JSON</code> 格式的 &#39;{&quot;text&quot;: &quot;this is fourth message&quot;, &quot;time&quot;: &quot;12:00:00&quot;}&#39;。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 注释</span></span>
<span class="line"><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> is first message\\n\\n</span></span>
<span class="line"><span style="color:#6A737D;">// 消息1</span></span>
<span class="line"><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> is second message\\n\\n</span></span>
<span class="line"><span style="color:#6A737D;">// 消息2</span></span>
<span class="line"><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> is third message part one\\n</span></span>
<span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> is third message part two\\n\\n</span></span>
<span class="line"><span style="color:#6A737D;">// 消息3</span></span>
<span class="line"><span style="color:#B392F0;">event</span><span style="color:#E1E4E8;">: server</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">time\\n</span></span>
<span class="line"><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">\\n</span></span>
<span class="line"><span style="color:#B392F0;">retry</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">30000</span><span style="color:#E1E4E8;">\\n</span></span>
<span class="line"><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">: {</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;this is fourth message&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;time&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2023-04-09 12:00:00&quot;</span><span style="color:#E1E4E8;">}\\n\\n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 注释</span></span>
<span class="line"><span style="color:#24292E;">: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> is first message\\n\\n</span></span>
<span class="line"><span style="color:#6A737D;">// 消息1</span></span>
<span class="line"><span style="color:#6F42C1;">data</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> is second message\\n\\n</span></span>
<span class="line"><span style="color:#6A737D;">// 消息2</span></span>
<span class="line"><span style="color:#6F42C1;">data</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> is third message part one\\n</span></span>
<span class="line"><span style="color:#24292E;">data </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> is third message part two\\n\\n</span></span>
<span class="line"><span style="color:#6A737D;">// 消息3</span></span>
<span class="line"><span style="color:#6F42C1;">event</span><span style="color:#24292E;">: server</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">time\\n</span></span>
<span class="line"><span style="color:#6F42C1;">id</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">\\n</span></span>
<span class="line"><span style="color:#6F42C1;">retry</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">30000</span><span style="color:#24292E;">\\n</span></span>
<span class="line"><span style="color:#6F42C1;">data</span><span style="color:#24292E;">: {</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;this is fourth message&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;time&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2023-04-09 12:00:00&quot;</span><span style="color:#24292E;">}\\n\\n</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">示例代码如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getStream</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;text/event-stream&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 开启sse协议</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cache-Control&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;no-cache&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 避免浏览器缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Connection&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;keep-alive&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// sse是一个一直保持开启的 TCP 连接，所以 Connection 为 keep-alive</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当请求断开时，结束响应</span></span>
<span class="line"><span style="color:#E1E4E8;">  req.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">clearInterval</span><span style="color:#E1E4E8;">(timer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">timer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 自定义事件名称customEvent</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`event: customEvent</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`id: \${</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`retry: 30000</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`data: \${</span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#9ECBFF;">({ content: </span><span style="color:#9ECBFF;">&quot;你好!&quot;</span><span style="color:#9ECBFF;"> })</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    id</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 响应10次内容就结束本次HTTP传输</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (id </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">clearInterval</span><span style="color:#E1E4E8;">(timer);</span></span>
<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getStream</span><span style="color:#24292E;">(</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;text/event-stream&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 开启sse协议</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Cache-Control&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;no-cache&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 避免浏览器缓存</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Connection&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;keep-alive&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// sse是一个一直保持开启的 TCP 连接，所以 Connection 为 keep-alive</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当请求断开时，结束响应</span></span>
<span class="line"><span style="color:#24292E;">  req.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">clearInterval</span><span style="color:#24292E;">(timer);</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">timer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 自定义事件名称customEvent</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`event: customEvent</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`id: \${</span><span style="color:#24292E;">id</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`retry: 30000</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`data: \${</span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">({ content: </span><span style="color:#032F62;">&quot;你好!&quot;</span><span style="color:#032F62;"> })</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    id</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 响应10次内容就结束本次HTTP传输</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (id </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">clearInterval</span><span style="color:#24292E;">(timer);</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div><h2 id="sse-推送房间" tabindex="-1">SSE 推送房间 <a class="header-anchor" href="#sse-推送房间" aria-label="Permalink to &quot;SSE 推送房间&quot;">​</a></h2><h3 id="基本步骤" tabindex="-1">基本步骤 <a class="header-anchor" href="#基本步骤" aria-label="Permalink to &quot;基本步骤&quot;">​</a></h3><ol><li>服务端维护房间 id 的表，用来发送对应消息。</li><li>客户端发送 HTTP 请求，服务端在表中添加一个房间号 id，并返回给客户端</li><li>客户端创建 SSE 请求，开启长连接</li><li>客户端的<code>EventSource</code>需要监听房间号事件，服务端可以在需要推送的时候响应该事件的消息，这样客户端就能接收到数据了。</li><li>客户端发送 HTTP 请求，携带上房间号 id，服务器通过 id 删除表中的房间号。成功后客户端断开连接。</li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ol><li><a href="https://juejin.cn/post/7229632570374783034#heading-14" target="_blank" rel="noreferrer">https://juejin.cn/post/7229632570374783034#heading-14</a></li></ol>`,49),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};

import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.273ff57c.js";const F=JSON.parse('{"title":"预览本地图片","description":"","frontmatter":{},"headers":[],"relativePath":"question/js/05.md","filePath":"question/js/05.md","lastUpdated":1699188084000}'),o={name:"question/js/05.md"},p=l(`<h1 id="预览本地图片" tabindex="-1">预览本地图片 <a class="header-anchor" href="#预览本地图片" aria-label="Permalink to &quot;预览本地图片&quot;">​</a></h1><p>​ 做上传图片时，我通常是上传图片完成后，后端保存图片并响应挂载好的图片 url，前端获取到后通过 image 的 src 加载。这样会导致发送一次 HTTP 请求，有没有更好的方式？</p><h2 id="base64" tabindex="-1">Base64 <a class="header-anchor" href="#base64" aria-label="Permalink to &quot;Base64&quot;">​</a></h2><p>​ 使用 base64 编码格式是可以被<code>image</code>标签解析出图片的。需要使用<code>FileReader</code>读取出文件并转换成 base64 字符串</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">byBase64</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fd</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileReader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// data是对应的File文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  fd.</span><span style="color:#B392F0;">readAsDataURL</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 转换base64是异步的，等待转换完成再去读结果。</span></span>
<span class="line"><span style="color:#E1E4E8;">  fd.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;load&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    img.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fd.result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">byBase64</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// data是对应的File文件</span></span>
<span class="line"><span style="color:#24292E;">  fd.</span><span style="color:#6F42C1;">readAsDataURL</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 转换base64是异步的，等待转换完成再去读结果。</span></span>
<span class="line"><span style="color:#24292E;">  fd.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;load&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    img.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fd.result;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="blob" tabindex="-1">Blob <a class="header-anchor" href="#blob" aria-label="Permalink to &quot;Blob&quot;">​</a></h2><p>​ 使用 Blob 同样可以被<code>image</code>标签解析出图片的。需要使用 Blob 将 File 转换成 Blob 实例，并通过<code> URL.createObjectURL</code>将 Blob 转换成能被<code>image</code>识别的图片。</p><p>就一个 api <code>URL.createObjectURL</code>，返回值是 url string，格式大概是<code>blob:http://localhost:3000/56a79464-d044-4160-8188-a74f58128786</code>，<code>blob:</code>开头，后面跟着当前网站域名加一个 guid。这个 url 的生命周期和创建它的窗口中的 document 绑定，即刷新页面、关闭页面就会被自动释放了，就失效了。<strong>可以当做页面图片回显或者 download link 用，不能用作存储</strong>。</p><p><strong>这种 URL 形式回显在页面中，会大幅提高性能，尤其是图片非常多的情况。但是要注意释放时机。</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">byBlob</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// data是对应上传的File文件实例</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">blob</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span><span style="color:#E1E4E8;">([data], { type: data.type });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createObjectURL</span><span style="color:#E1E4E8;">(blob);</span></span>
<span class="line"><span style="color:#E1E4E8;">  img.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">byBlob</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// data是对应上传的File文件实例</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">blob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;">([data], { type: data.type });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">url</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createObjectURL</span><span style="color:#24292E;">(blob);</span></span>
<span class="line"><span style="color:#24292E;">  img.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,10),e=[p];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{F as __pageData,u as default};

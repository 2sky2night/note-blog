import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.f98883f0.js";const h=JSON.parse('{"title":"下载文件进度","description":"","frontmatter":{},"headers":[],"relativePath":"question/node/02.md","filePath":"question/node/02.md","lastUpdated":1699188084000}'),l={name:"question/node/02.md"},p=o(`<h1 id="下载文件进度" tabindex="-1">下载文件进度 <a class="header-anchor" href="#下载文件进度" aria-label="Permalink to &quot;下载文件进度&quot;">​</a></h1><p>​ 在网页中，有文件下载功能时，我们时常需要通过文件总大小以及当前下载大小计算出下载百分比。但纯前端无法获得目标文件的总大小，此时我们需要让后端的响应报文中配置响应头部<code>Content-Length</code>字段，Content-Length 字段可以和 XHR 配合，实现下载进度这个功能。</p><p>关键点：后端需要给下载的文件配置响应头部<code>Content-Length</code>，前端需要监听<code>onprogress</code>事件。</p><h2 id="后端" tabindex="-1">后端 <a class="header-anchor" href="#后端" aria-label="Permalink to &quot;后端&quot;">​</a></h2><p>​ 后端需要在响应数据的同时配置<code>Content-Length</code>字段即可，在 node 中可以通过<code>fs.stat</code>获取文件信息。文件读取最好使用流式+管道的方式，这样节省内存开销和<s>带宽</s>占用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 获取文件大小</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stats</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">statSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./a.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 配置响应头部</span></span>
<span class="line"><span style="color:#E1E4E8;">res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Length&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(stats.size));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 获取文件大小</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stats</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">statSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./a.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 配置响应头部</span></span>
<span class="line"><span style="color:#24292E;">res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Length&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(stats.size));</span></span></code></pre></div><h2 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端" aria-label="Permalink to &quot;前端&quot;">​</a></h2><p>​ 通过 XHR 实例的 onprogress 事件，监听传输过程</p><p>​ e.total 是本次传输的总大小，后端必须响应 Content-Length 字段，否则一致都是 0。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">box</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.box&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">xhr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLHttpRequest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;get&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/01.mp4&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">onprogress</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// e.loaded是当前加载了多少了</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// e.total是总大小，后端必须响应Content-Length字段，否则一直都是0</span></span>
<span class="line"><span style="color:#E1E4E8;">  box.innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#9ECBFF;">((</span><span style="color:#E1E4E8;">e</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">loaded</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">/</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">e</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">total</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">100</span><span style="color:#9ECBFF;">).</span><span style="color:#B392F0;">toFixed</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}%\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">onload</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">box</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.box&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">xhr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/01.mp4&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">onprogress</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// e.loaded是当前加载了多少了</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// e.total是总大小，后端必须响应Content-Length字段，否则一直都是0</span></span>
<span class="line"><span style="color:#24292E;">  box.innerText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#032F62;">((</span><span style="color:#24292E;">e</span><span style="color:#032F62;">.</span><span style="color:#24292E;">loaded</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">/</span><span style="color:#032F62;"> </span><span style="color:#24292E;">e</span><span style="color:#032F62;">.</span><span style="color:#24292E;">total</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">*</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">100</span><span style="color:#032F62;">).</span><span style="color:#6F42C1;">toFixed</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">2</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}%\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">onload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ol><li><a href="https://juejin.cn/post/6955011872298893319" target="_blank" rel="noreferrer">https://juejin.cn/post/6955011872298893319</a></li></ol>`,12),e=[p];function t(c,r,E,y,F,i){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};

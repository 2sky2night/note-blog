import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.f98883f0.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/js/event-loop.md","filePath":"interview/js/event-loop.md","lastUpdated":1699188084000}'),o={name:"interview/js/event-loop.md"},p=l(`<h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h2><p>​ <strong>总结</strong>:事件循环是 JS 的运行机制，JS 是单线程的，意味着所有任务都需要排队依次执行，前一个任务未完成时后续任务不能被执行。为了解决任务阻塞后续任务执行就有了同步和异步任务，异步任务交给其他线程中处理，当异步任务需要执行将其放到主线程中执行。事件循环具体流程....</p><p>​ 了解事件循环需要先知道 JS 为什么拥有事件循环机制，看看 JS 拥有事件循环的历史原因。</p><h2 id="_1-js-是单线程的" tabindex="-1">1.JS 是单线程的 <a class="header-anchor" href="#_1-js-是单线程的" aria-label="Permalink to &quot;1.JS 是单线程的&quot;">​</a></h2><p>​ <strong>单线程</strong>意味着 Web 应用的所有代码都是在一个线程中运行的，同一时间只能做一件事情。为什么不能是多线程的？因为 JS 是需要操作 DOM 的，若某个线程通过 DOM 删除了一个元素而另一个线程有在这个元素中添加了子元素，那么浏览器以哪个线程的操作为准？为了降低复杂性，所以 JS 只能是单线程的。</p><h2 id="_2-任务队列" tabindex="-1">2.任务队列 <a class="header-anchor" href="#_2-任务队列" aria-label="Permalink to &quot;2.任务队列&quot;">​</a></h2><p>​ 单线程就意味着所有任务都需要排队执行，前一个任务结束，后面的任务才能执行。若前一个任务耗费事件长，后续任务也需要等待前一个任务完成才能被执行。例如网络请求，就需要等待响应成功才能执行后续任务，会导致后续任务的阻塞。</p><blockquote><p>JavaScript 语言的设计者意识到，这时主线程完全可以不管 IO 设备，挂起处于等待中的任务，先运行排在后面的任务。等到 IO 设备返回了结果，再回过头，把挂起的任务继续执行下去。</p></blockquote><p>后来，JS 有了同步任务、异步任务的把原先的任务区分开来：</p><p>同步任务：主线程中排队执行的任务，只有前一个同步任务完成，才能执行后续同步任务。</p><p>异步任务：异步任务不会阻塞同步任务的执行，会将异步任务放到浏览器其他线程中处理，当异步任务有了结果后，会将其放到<strong>任务队列</strong>里等待主线程执行。</p><p>​ 任务队列：是用来存放异步任务的。</p><h2 id="_3-事件循环" tabindex="-1">3.事件循环 <a class="header-anchor" href="#_3-事件循环" aria-label="Permalink to &quot;3.事件循环&quot;">​</a></h2><p>​ 整个 JS 应用的执行流程如下：</p><ol><li>主线程执行同步任务</li><li>遇到异步操作时将异步任务注册给<code>event table</code>，待合适时会入队到任务队列<code>event queue</code>中</li><li>主线程同步任务执行完成，查看任务队列中是否有需要执行的任务</li><li>若有，出队然后执行一个任务；若无，执行完毕。</li><li>主线程不断重复步骤 3、4</li></ol><p>整个执行流程就是指事件循环，事件循环就是 JS 的运行机制。</p><h2 id="_4-任务优先级" tabindex="-1">4.任务优先级 <a class="header-anchor" href="#_4-任务优先级" aria-label="Permalink to &quot;4.任务优先级&quot;">​</a></h2><p>​ 在 node 环境下，任务是有优先级的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">setTimeout</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">setImmediate。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">process.</span><span style="color:#6F42C1;">nextTick</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">setTimeout</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">setImmediate。</span></span></code></pre></div><p>​ 只需要知道<code>nextTick</code>比<code>then</code>注册的任务有更高优先级。</p><h2 id="_5-微任务须知" tabindex="-1">5.微任务须知 <a class="header-anchor" href="#_5-微任务须知" aria-label="Permalink to &quot;5.微任务须知&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>​ 若在本次循环的某个微任务执行时，又创建了微任务，则这个新的微任务会添加到本次循环的<strong>微任务队尾</strong>中，等待执行。而不会将该微任务添加到下次循环的微任务队列中。</p></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;script start&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;then01&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;then02&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;then03&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;setTimeout&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;then&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;script end&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;script start&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;then01&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;then02&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;then03&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setTimeout&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;then&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;script end&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="_6-宏微任务相关-api" tabindex="-1">6.宏微任务相关 API <a class="header-anchor" href="#_6-宏微任务相关-api" aria-label="Permalink to &quot;6.宏微任务相关 API&quot;">​</a></h2><h3 id="宏" tabindex="-1">宏 <a class="header-anchor" href="#宏" aria-label="Permalink to &quot;宏&quot;">​</a></h3><p>setTimeout、setInterval、requestAnimationFrame、IO 操作、UI 渲染</p><h3 id="微" tabindex="-1">微 <a class="header-anchor" href="#微" aria-label="Permalink to &quot;微&quot;">​</a></h3><p>then、queueMicrotask、Observer、nextTick</p>`,28),e=[p];function t(c,r,E,y,i,h){return n(),a("div",null,e)}const F=s(o,[["render",t]]);export{u as __pageData,F as default};

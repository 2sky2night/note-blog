import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.273ff57c.js";const h=JSON.parse('{"title":"Vite 项目配置代码规范","description":"","frontmatter":{},"headers":[],"relativePath":"question/vite/04.md","filePath":"question/vite/04.md","lastUpdated":1699188084000}'),o={name:"question/vite/04.md"},l=p(`<h1 id="vite-项目配置代码规范" tabindex="-1">Vite 项目配置代码规范 <a class="header-anchor" href="#vite-项目配置代码规范" aria-label="Permalink to &quot;Vite 项目配置代码规范&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>最好自己跟一遍，重新记笔记</p></div><p>​ 代码规范包括了 JS、CSS、HTML、git 等范围，需要配置的东西非常多，但是可以让项目更规范，保持一种风格，配置如下:</p><p>​ <code>eslint</code>:检测代码是否符合规范</p><p>​ <code>peritter</code>:格式化代码</p><p>​ <code>husky</code>:git 提交钩子，可以在操作 git 时执行一些其他操作，如检查代码规范性等</p><p>​ <code>lint-staged</code>:可以安全的执行钩子。</p><h4 id="代码检测以及规范" tabindex="-1">代码检测以及规范 <a class="header-anchor" href="#代码检测以及规范" aria-label="Permalink to &quot;代码检测以及规范&quot;">​</a></h4><blockquote><p>示例项目使用 Vue3 + TS + Vite，刚好该脚手架创建出来的项目没有 <code>eslint</code> <code>prettier</code> 的配置。可以重零搭建。其他前端项目也可以此作为参考。</p></blockquote><h5 id="eslint-检测代码" tabindex="-1">ESLint 检测代码 <a class="header-anchor" href="#eslint-检测代码" aria-label="Permalink to &quot;ESLint 检测代码&quot;">​</a></h5><p>1, 安装 eslint <code>npm install eslint -D</code>。</p><p>2, 生成 eslint 默认配置 <code>./node_modules/.bin/eslint --init</code></p><ul><li>执行后有三个选项，默认为第二个，默认即可。</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">How would you like to </span><span style="color:#85E89D;">use</span><span style="color:#E1E4E8;"> ESLint?</span></span>
<span class="line"><span style="color:#E1E4E8;">  To check syntax only  只检查语法</span></span>
<span class="line"><span style="color:#E1E4E8;">❯ To check syntax and find problems 检查语法并查找问题</span></span>
<span class="line"><span style="color:#E1E4E8;">  To check syntax, find problems, and enforce </span><span style="color:#85E89D;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;"> 检查语法、发现问题并强制执行代码样式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">How would you like to </span><span style="color:#22863A;">use</span><span style="color:#24292E;"> ESLint?</span></span>
<span class="line"><span style="color:#24292E;">  To check syntax only  只检查语法</span></span>
<span class="line"><span style="color:#24292E;">❯ To check syntax and find problems 检查语法并查找问题</span></span>
<span class="line"><span style="color:#24292E;">  To check syntax, find problems, and enforce </span><span style="color:#22863A;">code</span><span style="color:#24292E;"> </span><span style="color:#22863A;">style</span><span style="color:#24292E;"> 检查语法、发现问题并强制执行代码样式</span></span></code></pre></div><ul><li>选择哪种模块规范，示例项目为 ES 模块所以选择第一个。</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">What </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;"> modules does your project use?</span></span>
<span class="line"><span style="color:#E1E4E8;">❯ JavaScript modules (import/export)</span></span>
<span class="line"><span style="color:#E1E4E8;">  CommonJS (require/exports)</span></span>
<span class="line"><span style="color:#E1E4E8;">  None of these</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">What </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">of</span><span style="color:#24292E;"> modules does your project use?</span></span>
<span class="line"><span style="color:#24292E;">❯ JavaScript modules (import/export)</span></span>
<span class="line"><span style="color:#24292E;">  CommonJS (require/exports)</span></span>
<span class="line"><span style="color:#24292E;">  None of these</span></span></code></pre></div><ul><li>选择哪种框架</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Which</span><span style="color:#E1E4E8;"> framework does your project </span><span style="color:#F97583;">use?</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">React</span></span>
<span class="line"><span style="color:#E1E4E8;">❯ </span><span style="color:#B392F0;">Vue</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">js</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">None</span><span style="color:#E1E4E8;"> of these</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Which</span><span style="color:#24292E;"> framework does your project </span><span style="color:#D73A49;">use?</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">React</span></span>
<span class="line"><span style="color:#24292E;">❯ </span><span style="color:#6F42C1;">Vue</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">js</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">None</span><span style="color:#24292E;"> of these</span></span></code></pre></div><ul><li>是否使用 <code>Typescript</code></li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">Does your project use TypeScript? › No / Yes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">Does your project use TypeScript? › No / Yes</span></span></code></pre></div><ul><li>在哪个环境运行项目，脚手架项目毫无疑问是 <code>Node</code></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Where does your </span><span style="color:#85E89D;">code</span><span style="color:#E1E4E8;"> run? …  (Press &lt;space</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> to </span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">, &lt;</span><span style="color:#85E89D;">a</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> to toggle all, &lt;</span><span style="color:#85E89D;">i</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> to invert selection)</span></span>
<span class="line"><span style="color:#E1E4E8;">✔ Browser</span></span>
<span class="line"><span style="color:#E1E4E8;">✔ Node</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Where does your </span><span style="color:#22863A;">code</span><span style="color:#24292E;"> run? …  (Press &lt;space</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> to </span><span style="color:#22863A;">select</span><span style="color:#24292E;">, &lt;</span><span style="color:#22863A;">a</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> to toggle all, &lt;</span><span style="color:#22863A;">i</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> to invert selection)</span></span>
<span class="line"><span style="color:#24292E;">✔ Browser</span></span>
<span class="line"><span style="color:#24292E;">✔ Node</span></span></code></pre></div><ul><li>选择配置文件的格式。</li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">What format </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> you want your config file to be </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;">? …</span></span>
<span class="line"><span style="color:#E1E4E8;">❯ JavaScript</span></span>
<span class="line"><span style="color:#E1E4E8;">  YAML</span></span>
<span class="line"><span style="color:#E1E4E8;">  JSON</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">What format </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> you want your config file to be </span><span style="color:#D73A49;">in</span><span style="color:#24292E;">? …</span></span>
<span class="line"><span style="color:#24292E;">❯ JavaScript</span></span>
<span class="line"><span style="color:#24292E;">  YAML</span></span>
<span class="line"><span style="color:#24292E;">  JSON</span></span></code></pre></div><ul><li>是不是要现在下载这些依赖。<code>eslint-plugin-vue@latest</code> <code>@typescript-eslint/eslint-plugin@latest</code> <code>@typescript-eslint/parser@latest</code>。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">eslint</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">vue@latest @typescript</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">eslint</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">eslint</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugin@latest @typescript</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">eslint</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">parser@latest</span></span>
<span class="line"><span style="color:#E1E4E8;">? Would you </span><span style="color:#F97583;">like</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">to</span><span style="color:#E1E4E8;"> install them </span><span style="color:#F97583;">now</span><span style="color:#E1E4E8;">? › </span><span style="color:#F97583;">No</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> Yes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">eslint</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">vue@latest @typescript</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">eslint</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">eslint</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugin@latest @typescript</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">eslint</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">parser@latest</span></span>
<span class="line"><span style="color:#24292E;">? Would you </span><span style="color:#D73A49;">like</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">to</span><span style="color:#24292E;"> install them </span><span style="color:#D73A49;">now</span><span style="color:#24292E;">? › </span><span style="color:#D73A49;">No</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> Yes</span></span></code></pre></div><ul><li>选择用哪种包管理工具</li></ul><div class="language-perl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> Which package manager </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> you want to </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;">? …</span></span>
<span class="line"><span style="color:#E1E4E8;">❯ npm</span></span>
<span class="line"><span style="color:#E1E4E8;">  yarn</span></span>
<span class="line"><span style="color:#E1E4E8;">  pnpm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> Which package manager </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> you want to </span><span style="color:#D73A49;">use</span><span style="color:#24292E;">? …</span></span>
<span class="line"><span style="color:#24292E;">❯ npm</span></span>
<span class="line"><span style="color:#24292E;">  yarn</span></span>
<span class="line"><span style="color:#24292E;">  pnpm</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cecd5aabd2134f8889b5b1061b9a2703~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="111.jpg"></p><p>完成之后项目根目录会生成 <code>.eslintrc.js</code> 。</p><details><summary>点击查看 .eslintrc.js 完整内容</summary><pre><div class="code-block-extension-header" style="background-color:rgb(30, 30, 30);"><div class="code-block-extension-headerLeft"><div class="code-block-extension-foldBtn"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M16.924 9.617A1 1 0 0 0 16 9H8a1 1 0 0 0-.707 1.707l4 4a1 1 0 0 0 1.414 0l4-4a1 1 0 0 0 .217-1.09z" data-name="Down"></path></svg></div></div><div class="code-block-extension-headerRight"><span class="code-block-extension-lang">javascript</span><div class="code-block-extension-copyCodeBtn">复制代码</div></div></div><code class="hljs language-javascript code-block-extension-codeShowNum" lang="javascript"><span class="code-block-extension-codeLine" data-line-num="1"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {</span>
<span class="code-block-extension-codeLine" data-line-num="2">  <span class="hljs-attr">env</span>: {</span>
<span class="code-block-extension-codeLine" data-line-num="3">    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>,</span>
<span class="code-block-extension-codeLine" data-line-num="4">    <span class="hljs-attr">es2021</span>: <span class="hljs-literal">true</span>,</span>
<span class="code-block-extension-codeLine" data-line-num="5">    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 新增的文件可能不包含这个键值，会引起 commonjs 规范的代码报错。可以新增此项解决该问题。</span></span>
<span class="code-block-extension-codeLine" data-line-num="6">  },</span>
<span class="code-block-extension-codeLine" data-line-num="7">  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#39;eslint:recommended&#39;</span>, <span class="hljs-string">&#39;plugin:vue/essential&#39;</span>, <span class="hljs-string">&#39;plugin:@typescript-eslint/recommended&#39;</span>],</span>
<span class="code-block-extension-codeLine" data-line-num="8">  <span class="hljs-attr">parserOptions</span>: {</span>
<span class="code-block-extension-codeLine" data-line-num="9">    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-string">&#39;latest&#39;</span>,</span>
<span class="code-block-extension-codeLine" data-line-num="10">    <span class="hljs-attr">parser</span>: <span class="hljs-string">&#39;@typescript-eslint/parser&#39;</span>,</span>
<span class="code-block-extension-codeLine" data-line-num="11">    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&#39;module&#39;</span>,</span>
<span class="code-block-extension-codeLine" data-line-num="12">  },</span>
<span class="code-block-extension-codeLine" data-line-num="13">  <span class="hljs-attr">plugins</span>: [<span class="hljs-string">&#39;vue&#39;</span>, <span class="hljs-string">&#39;@typescript-eslint&#39;</span>],</span>
<span class="code-block-extension-codeLine" data-line-num="14">  <span class="hljs-attr">rules</span>: {},</span>
<span class="code-block-extension-codeLine" data-line-num="15">};</span>
</code></pre></details><p>当然也可以配置 <code>.eslintignore</code> 文件来配置不想要规则的文件。内容类似于 <code>.gitignore</code>。</p><p>3, 在 <code>package.json</code> 中新增一条命令 并且执行。 <code>&quot;lint:eslint&quot;: &quot;eslint \\&quot;src/**/*.{vue,ts,tsx}\\&quot; --fix&quot;</code>。</p><p>如果在执行的时候遇到以下错误。是由于 <code>Node</code> 版本问题导致的。可以将版本提升到 <code>v16.x.x</code></p><div class="language-vbnet vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vbnet</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Oops! Something went wrong! :(</span></span>
<span class="line"><span style="color:#e1e4e8;">ESLint: 8.16.0</span></span>
<span class="line"><span style="color:#e1e4e8;">TypeError: Module.createRequire is not a function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Oops! Something went wrong! :(</span></span>
<span class="line"><span style="color:#24292e;">ESLint: 8.16.0</span></span>
<span class="line"><span style="color:#24292e;">TypeError: Module.createRequire is not a function</span></span></code></pre></div><p>4, 此时执行 <code>npm run lint:eslint</code> 发现会出现以下错误。原因是 <code>eslint</code> 并不能识别 <code>vue</code> 中的模板内容。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9bd1a90f4914331b5ee76c810d67c6e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="eslint1.jpg"></p><p>5，可以通过 <code>vue-eslint-parser</code> 插件来解决上述问题。<code>npm install vue-eslint-parser -D</code>。 随后在 <code>.eslintrc.js</code> 中新增以下内容。<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-eslint-parser" target="_blank" rel="noreferrer">点击查看 <code>vue-eslint-parser</code> 文档</a></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  extends: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  parser: </span><span style="color:#9ECBFF;">&quot;vue-eslint-parser&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 新增 parser 键值。</span></span>
<span class="line"><span style="color:#E1E4E8;">  parserOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  extends: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  parser: </span><span style="color:#032F62;">&quot;vue-eslint-parser&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 新增 parser 键值。</span></span>
<span class="line"><span style="color:#24292E;">  parserOptions: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>6，再次执行 <code>npm run lint:eslint</code> 命令发现又出现下面的错误。原因是 <code>Vue3</code> 创建出的模板项目在 <code>&lt;template&gt;</code> 中都没有了根节点导致的。可以通过在 <code>.eslintrc.js</code> 中新增一条 <code>rule</code> 解决此问题。 <code>&quot;vue/no-multiple-template-root&quot;: &quot;off&quot;</code>。 <a href="https://link.juejin.cn?target=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F64867504%2Fvue-3-the-template-root-requires-exactly-one-element-eslint-plugin-vue" target="_blank" rel="noreferrer">stackOverflow</a></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63a0a0ad5da343a8a293e7578b6f6183~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="eslint2.jpg"></p><p>通过上面的一通操作，基于 <code>Vue</code> 项目的代码检测已经解决了。但问题是每次只有运行 <code>npm run lint:eslint</code> 命令的时候才知道哪里出了问题。</p><p>推荐使用 <code>vscode</code> 的小伙伴安装 <code>eslint</code> 插件。拥有此插件后 <code>vscode</code> 就可以帮助我们动态的检测代码。比如下面场景。</p><p>没有安装插件前，声明了一个 <code>A</code> 变量虽然没有引用，但是也不会有问题。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/338e2451c9de4eeb8a0cd39ff81c8631~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="eslint3.jpg"></p><p>安装插件后，会获得警告，把鼠标放到上面还会提示问题所在。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1dc4f294c974b9b84811331d94300a9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="eslint4.jpg"></p><p>7，此时再借助插件 <code>vite-plugin-eslint</code> 将错误信息同时在浏览器中也进行显示。<code>npm install vite-plugin-eslint</code>；</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vite&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> eslint </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vite-plugin-eslint&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span><span style="color:#B392F0;">eslint</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vite&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> eslint </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vite-plugin-eslint&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span><span style="color:#6F42C1;">eslint</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/214e05f0cd674e6f970d364631b6daef~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image.png"></p><h5 id="prettier-美化代码" tabindex="-1">Prettier 美化代码 <a class="header-anchor" href="#prettier-美化代码" aria-label="Permalink to &quot;Prettier 美化代码&quot;">​</a></h5><p>相信不少小伙伴都是自己在 <code>vscode</code> 中配置 <code>eslint</code> + <code>prettier</code> 自动格式化代码，表面看来效果不错。但是不要忘记我们做的是项目，不可能要求每个团队的成员的 IDE 去和你的 IDE 相同配置吧。下面就看下如何在项目中使用 <code>prettier</code></p><p>1，安装插件 <code>npm install prettier -D</code>，随后在项目根目录新增 <code>.prettierrc.js</code> 内容如下。<a href="https://link.juejin.cn?target=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Foptions.html" target="_blank" rel="noreferrer">点击查看更多配置</a></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  printWidth: </span><span style="color:#79B8FF;">120</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//单行长度</span></span>
<span class="line"><span style="color:#E1E4E8;">  tabWidth: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//缩进长度</span></span>
<span class="line"><span style="color:#E1E4E8;">  useTabs: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//使用空格代替tab缩进</span></span>
<span class="line"><span style="color:#E1E4E8;">  semi: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//句末使用分号</span></span>
<span class="line"><span style="color:#E1E4E8;">  singleQuote: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//使用单引号</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  printWidth: </span><span style="color:#005CC5;">120</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//单行长度</span></span>
<span class="line"><span style="color:#24292E;">  tabWidth: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//缩进长度</span></span>
<span class="line"><span style="color:#24292E;">  useTabs: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//使用空格代替tab缩进</span></span>
<span class="line"><span style="color:#24292E;">  semi: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//句末使用分号</span></span>
<span class="line"><span style="color:#24292E;">  singleQuote: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//使用单引号</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>当然也可以配置 <code>.prettierignore</code> 来新增不想格式化的文件。规则类似于 <code>.gitignore</code>。</p><p>2，在 <code>package.json</code> 中增加命令。<code>&quot;lint:prettier&quot;: &quot;prettier --write --loglevel warn \\&quot;src/**/*.{js,json,tsx,css,less,scss,vue,html,md}\\&quot;&quot;</code>，此时每次运行该指令在 src 下的文件中的内容都会执行该规范格式化代码。</p><p>3，此时则可以通过 <code>vscode</code> 中的 <code>prettier</code> 插件来实现保存代码自动格式化。安装完成后在 <code>setting.json</code> 中增加以下内容。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;editor.formatOnSave&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 开启自动保存</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;editor.defaultFormatter&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;esbenp.prettier-vscode&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 默认格式化工具选择prettier</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;editor.formatOnSave&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 开启自动保存</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;editor.defaultFormatter&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;esbenp.prettier-vscode&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 默认格式化工具选择prettier</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>注意</strong> 不管你之前有没有在 <code>vscode</code> 中配置过 <code>prettier</code> 他自动 <code>format</code> 的规则是优先项目中的配置，项目中没有配置才会采用自己配置的方式进行 <code>format</code></p><p>4，让 <code>ESlint</code> 也用 <code>prettier</code> 的规则来检测代码是否合法。下载 <code>eslint-plugin-prettier</code> <code>eslint-config-prettier</code>，并做出以下配置。<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fprettier%2Feslint-config-prettier" target="_blank" rel="noreferrer">点击查看 <code>eslint-config-prettier</code> 文档</a>、<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fprettier%2Feslint-plugin-prettier" target="_blank" rel="noreferrer">点击查看 <code>eslint-plugin-prettier</code> 文档</a></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// .eslintrc.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;prettier&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;plugin:prettier/recommended&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// .eslintrc.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;prettier&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;plugin:prettier/recommended&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当配置完之后发现好多地方都报错了，不要慌张，这是我们的规则生效了，此时可以执行之前配置的 <code>lint:prettier</code> 指令，或者保存让它自己格式化。</p><h5 id="husky" tabindex="-1">Husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;Husky&quot;">​</a></h5><p>这是一个 git hook 的工具，可以通过在 git 操作期间的一些钩子，做一些额外的操作，比如执行 lint test 等。<a href="https://link.juejin.cn?target=https%3A%2F%2Fgit-scm.com%2Fdocs%2Fgithooks" target="_blank" rel="noreferrer">点击查看所有 git hooks</a> <a href="https://link.juejin.cn?target=https%3A%2F%2Ftypicode.github.io%2Fhusky%2F%23%2F%3Fid%3Darticles" target="_blank" rel="noreferrer">点击查看 <code>husky</code> 文档</a></p><p>一般情况可能用到以下钩子：</p><ul><li><code>pre-commit</code>：代码提交之前触发，可以通过此钩子判断代码是否符合规范。</li><li><code>commit-msg</code>：对 commit 的信息校验，可以通过此钩子判定 commit 是否合法。</li><li><code>pre-push</code>： 代码提交之前触发，可以通过此钩子对业务代码执行一些测试。</li></ul><blockquote><p>经过上述操作后，从代码编辑阶段解决了代码格式化的问题。但是总有一些小伙伴写出不符合规则的代码，并且提交到 git 仓库。</p><p>这个时候可以通过 git hook 来拦截提交的代码并执行之前配置的格式化代码相关命令，让提交的代码都是符合规范的。</p></blockquote><p>1，安装 <code>npm install husky -D</code> 随后执行 <code>npm set-script prepare &quot;husky install&quot;</code> 然后再 <code>package.json</code> 中会新增一条命令并执行这条命令。此时项目根目录会新增 <code>.husky</code> 文件夹。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;prepare&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;husky install&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;prepare&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;husky install&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样当团队中的其他伙伴 <code>clone</code> 项目并下载依赖时，则会自动执行该命令并启用 git 钩子，在项目的根目录新增 <code>.husky</code> 文件夹。而不需要再执行 <code>npm run prepare</code>。</p><p>2，创建 <code>pre-commit</code> 钩子，让代码在提交的时候执行前面配置的 <code>lint:prettier</code> 指令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">husky</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.husky/pre-commit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;npm run lint:prettier&quot;</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.husky/pre-commit</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 项目开始 install 的时候并不会新增这个钩子，需要提交到暂存区后续提交给所有的团队成员使用。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">husky</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.husky/pre-commit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;npm run lint:prettier&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.husky/pre-commit</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 项目开始 install 的时候并不会新增这个钩子，需要提交到暂存区后续提交给所有的团队成员使用。</span></span></code></pre></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad9e92737b1543029f7053e99e4b6808~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="husky1.jpg"></p><p>此时 <code>pre-commit</code> 内容为。 如果再次执行 <code>git commit</code> 时则会运行以下指令。当然也可以有多个指令， 比如把 <code>lint:eslint</code> 也可以加进去。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;$(</span><span style="color:#B392F0;">dirname</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">--</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#79B8FF;">$0</span><span style="color:#9ECBFF;">&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lint:prettier</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;$(</span><span style="color:#6F42C1;">dirname</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">--</span><span style="color:#032F62;"> &quot;</span><span style="color:#005CC5;">$0</span><span style="color:#032F62;">&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lint:prettier</span></span></code></pre></div><h5 id="lint-staged" tabindex="-1">Lint-staged <a class="header-anchor" href="#lint-staged" aria-label="Permalink to &quot;Lint-staged&quot;">​</a></h5><p>通过上面 <code>Husky</code> 工具，成功的在代码提交到仓库之前对代码做了美化，但是这种代码的<strong>美化</strong>是全局的，不完美，也不安全。试想你的同事提交了没有格式化的代码，你提交的时候全局把代码做了格式化，如果出了问题怎么排查？</p><p>这个时候就要 <code>lint-staged</code> 登场了，他能确保我们每次提交时执行的 <code>lint:prettier</code> 或者 <code>lint:eslint</code> 的代码都是暂存区的代码。及时因为美化代码导致的格式变了最终产生问题，也是我们这次提交的文件出现了问题。大大的减少了排查问题的范围。<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fokonet%2Flint-staged" target="_blank" rel="noreferrer">点击查看 lint-staged 文档</a></p><p>1，安装 <code>npm install lint-staged -D</code></p><p>2，将 <code>pre-commit</code> 文件中的命令修改为 <code>npx lint-staged</code></p><p>3，在 <code>package.json</code> 中新增以下内容。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;lint-staged&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;*.{js,vue,ts,jsx,tsx}&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;prettier --write&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;eslint --fix&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;*.{md,html,css,less,scss}&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;prettier --write&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;lint-staged&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;*.{js,vue,ts,jsx,tsx}&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;prettier --write&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;eslint --fix&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;*.{md,html,css,less,scss}&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;prettier --write&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="代码提交规范" tabindex="-1">代码提交规范 <a class="header-anchor" href="#代码提交规范" aria-label="Permalink to &quot;代码提交规范&quot;">​</a></h4><p>再开始规范之前先看一些比较出名的开源项目是怎么规范提交内容的。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35daefed91d2433e89fe914134aaab7d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="git1.jpg"></p><p>可以看出每次的提交都会有对应的前缀，手写也可以，就是麻烦。当然可以通过 <code>commitizen</code> 来帮助我们提交信息。</p><h5 id="commitizen-提交规范的-commit-信息" tabindex="-1">commitizen 提交规范的 commit 信息 <a class="header-anchor" href="#commitizen-提交规范的-commit-信息" aria-label="Permalink to &quot;commitizen 提交规范的 commit 信息&quot;">​</a></h5><p>1，安装 <code>npm install commitizen cz-conventional-changelog -D</code>。 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcommitizen%2Fcz-cli" target="_blank" rel="noreferrer">点击查看 commitizen 文档</a></p><p>2，在 <code>package.json</code> 中新增命令，以后不必要在执行 <code>git commit</code> 命令，直接执行 <code>npm run commit</code> 即可。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;commit&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cz&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;commit&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cz&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>3，执行 <code>npx commitizen init cz-conventional-changelog --save-dev --save-exact</code>。该命令做了两件事情。</p><ul><li>将 <code>config.commitizen</code> 密钥添加到 <code>package.json</code> 中。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;commitizen&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./node_modules/cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;config&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;commitizen&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./node_modules/cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>创建可交互的 commit 提交窗口。</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc68b619c7a54f159fa9a19ff5a02188~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="git2.jpg"></p><details><summary>点击查看 commit 选项具体含义</summary><ul><li><p><code>feat</code>：一个新功能。</p></li><li><p><code>fix</code>：解决 bug。</p></li><li><p><code>docs</code>：只是文档的更新。</p></li><li><p><code>style</code>：不影响代码含义的变更。</p></li><li><p><code>refactor</code>：重构代码</p></li><li><p><code>perf</code>：性能优化</p></li><li><p><code>test</code>：添加缺失的测试或者更正现有的测试代码</p></li><li><p><code>build</code>： 打包相关配置的修改</p></li><li><p><code>ci</code>： 持续继承相关的配置</p></li><li><p><code>chore</code>：其他没有修改 src 或者 测试文件的修改。</p></li></ul></details><p>4，提交过程示例</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e037b6b953844a578e531389d9854424~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="git3.jpg"></p><h5 id="commitlint-强制规范信息" tabindex="-1">commitlint 强制规范信息 <a class="header-anchor" href="#commitlint-强制规范信息" aria-label="Permalink to &quot;commitlint 强制规范信息&quot;">​</a></h5><p>经过上面的测试，现在已经能够提交规范的信息，但是也做出了一点牺牲。就是不在执行 <code>git commit</code> 了，这会导致一些新来的小伙伴没有注意到项目中配置了专有的提交命令，仍然使用了 <code>git commit</code>，这使得之前做的提交规范功亏一篑。</p><p>此时则可以使用 <code>commitlint</code> 来强制规范用户提交信息，只要不符合规范就不让他提交。<a href="https://link.juejin.cn?target=https%3A%2F%2Fcommitlint.js.org%2F%23%2Fguides-local-setup" target="_blank" rel="noreferrer">点击<code>commitlint</code> 文档</a></p><p>1，安装 <code>commitlint</code> 和 需要的规范配置。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@commitlint/{cli,config-conventional}</span></span>
<span class="line"><span style="color:#6A737D;"># windows 用户可能要执行下面的指令。</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@commitlint/config-conventional</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@commitlint/cli</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@commitlint/{cli,config-conventional}</span></span>
<span class="line"><span style="color:#6A737D;"># windows 用户可能要执行下面的指令。</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@commitlint/config-conventional</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@commitlint/cli</span></span></code></pre></div><p>2，创建配置文件。或者可以是 <code>.commitlintrc.js</code>、<code>.commitlintrc</code>、<code>commitlint.yml</code>、<code>commitlint.json</code>或者在 <code>package.json</code> 中新增 <code>commitlint</code> 键值对。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;module.exports = { extends: [&#39;@commitlint/config-conventional&#39;] };&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commitlint.config.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;module.exports = { extends: [&#39;@commitlint/config-conventional&#39;] };&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commitlint.config.js</span></span></code></pre></div><p>3，<code>.husky</code> 工作目录中新增钩子 <code>commit-msg</code> 或者可以执行 <code>npx husky add .husky/commit-msg &quot;npx --no -- commitlint --edit &#39;\\\${1}&#39;&quot;</code>，但我个人在执行的有点问题，最后的 <code>\${1}</code> 无法生成。不过无伤大雅，补上就可以了。<strong>记得提交到仓库和小伙伴共享此文件</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bash复制代码#!/bin/sh</span></span>
<span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\$</span><span style="color:#9ECBFF;">(dirname &quot;</span><span style="color:#79B8FF;">\\$</span><span style="color:#9ECBFF;">0&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--no</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commitlint</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--edit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\$</span><span style="color:#9ECBFF;">{1}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 最近又遇到一个问题，在这里记录一下。上面的 $1 不知道为啥用两天就执行不成功了，按照下面的方式就可以了。</span></span>
<span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--no</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commitlint</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--edit</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">$1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bash复制代码#!/bin/sh</span></span>
<span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\$</span><span style="color:#032F62;">(dirname &quot;</span><span style="color:#005CC5;">\\$</span><span style="color:#032F62;">0&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--no</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commitlint</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--edit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\$</span><span style="color:#032F62;">{1}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 最近又遇到一个问题，在这里记录一下。上面的 $1 不知道为啥用两天就执行不成功了，按照下面的方式就可以了。</span></span>
<span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--no</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commitlint</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--edit</span><span style="color:#24292E;"> </span><span style="color:#E36209;">$1</span></span></code></pre></div><p>此时 <code>commit</code> 就不能随便输入内容了。必须按照规范进行。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aaec9a6c061b462abfa9d60893d630b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="git4.jpg"></p><p>4，测试成果这里就不再演示了，删除本地项目，通过 <code>git clone</code> 项目，然后下载依赖，提交代码测试规范是否可用。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p>1.<a href="https://juejin.cn/post/7103172180384415781" target="_blank" rel="noreferrer">原文链接</a></p>`,112),e=[l];function t(c,r,i,d,y,E){return n(),a("div",null,e)}const m=s(o,[["render",t]]);export{h as __pageData,m as default};

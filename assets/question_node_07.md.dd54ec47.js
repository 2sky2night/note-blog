import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.f98883f0.js";const d=JSON.parse('{"title":"视频流","description":"","frontmatter":{},"headers":[],"relativePath":"question/node/07.md","filePath":"question/node/07.md","lastUpdated":null}'),l={name:"question/node/07.md"},o=p(`<h1 id="视频流" tabindex="-1">视频流 <a class="header-anchor" href="#视频流" aria-label="Permalink to &quot;视频流&quot;">​</a></h1><p>​ 视频流可以很好的节约用户、服务器流量，减少服务器性能开销。如同文件流同理，根据需要读取某段文件数据并响应数据，而不是直接响应整个文件。</p><p>​ 在不使用视频流的情况下，要想服务器响应一个视频就需要服务器读取整个文件并响应给客户端，video标签才能播放，但在大多数情况下，用户并不会把视频看完，我们需要根据用户需要懒加载+预加载视频才能减少服务器性能开销以及流量使用。</p><p>​ 其原理就是通过客户端告诉服务器需要加载视频的<strong>起始</strong>、<strong>末尾</strong>偏移量，服务器端对应读取该范围的数据并响应即可，最终通过video标签不断发送请求加载视频，直到末尾浏览完视频。</p><h2 id="先决条件" tabindex="-1">先决条件 <a class="header-anchor" href="#先决条件" aria-label="Permalink to &quot;先决条件&quot;">​</a></h2><p>在了解如何实现服务端响应视频流前，需要知道视频流需要后端的配合，几个必要的头部：</p><h3 id="accept-ranges" tabindex="-1">Accept-Ranges <a class="header-anchor" href="#accept-ranges" aria-label="Permalink to &quot;Accept-Ranges&quot;">​</a></h3><p>​ 作为响应头部中的属性出现，服务器是否可以接收范围类型的请求，若响应头部中<code>Accept-Ranges</code>字段不为<code>none</code>则说明支持范围类型的请求，常见值都是<code>range</code>。</p><h3 id="content-range" tabindex="-1">Content-Range <a class="header-anchor" href="#content-range" aria-label="Permalink to &quot;Content-Range&quot;">​</a></h3><p>​ 作为响应头部中的属性出现，表示范围数据的起始、末尾偏移量，其格式为:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Content-Range&quot;: \`bytes \${start}-\${end}/\${filesize}\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Content-Range&quot;: \`bytes \${start}-\${end}/\${filesize}\`</span></span></code></pre></div><p>start为文件的起始偏移量，end为文件的末尾偏移量，filesize为文件的总大小。</p><p><strong>注意</strong>：偏移量都是从0开始。</p><h3 id="range" tabindex="-1">Range <a class="header-anchor" href="#range" aria-label="Permalink to &quot;Range&quot;">​</a></h3><p>​ 作为请求头部的属性出现，表示本次请求偏移量的范围，其格式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">bytes=start-[end]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">bytes=start-[end]</span></span></code></pre></div><p>start为起始偏移量、end为末尾偏移量。end偏移量是可选的，若无end偏移量，则代表end为文件末尾偏移量。</p><h2 id="实战" tabindex="-1">实战 <a class="header-anchor" href="#实战" aria-label="Permalink to &quot;实战&quot;">​</a></h2><p>1.请求头部的range</p><p>​ 读取出请求头部的range属性，range的值一般都为：bytes=start-end，解析出start和end就知道请求范围的起始和末尾偏移量了。</p><p>​ 为了保持健壮性，若无range属性，则直接响应整个文件。</p><p>​ end参数是可选的，无end参数，默认为文件的末尾偏移量。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">middlware</span><span style="color:#E1E4E8;">=(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> {</span><span style="color:#FFAB70;">range</span><span style="color:#E1E4E8;">} = </span><span style="color:#B392F0;">req</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">range</span><span style="color:#E1E4E8;">===undefined){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 无range属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;01.mp4&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(res)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取文件大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">filesize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">statSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;01.mp4&quot;</span><span style="color:#E1E4E8;">).size</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">let</span><span style="color:#E1E4E8;"> [start,end] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> range.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bytes=&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 格式化偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(start);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">end</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">end</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(filesize</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,end)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">filesize</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middlware</span><span style="color:#24292E;">=(</span><span style="color:#E36209;">req</span><span style="color:#24292E;">,</span><span style="color:#E36209;">res</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">range</span><span style="color:#24292E;">} = </span><span style="color:#6F42C1;">req</span><span style="color:#24292E;">.</span><span style="color:#E36209;">headers</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">if</span><span style="color:#24292E;">(</span><span style="color:#E36209;">range</span><span style="color:#24292E;">===undefined){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 无range属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;01.mp4&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(res)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取文件大小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">filesize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">statSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;01.mp4&quot;</span><span style="color:#24292E;">).size</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取偏移量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> [start,end] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> range.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bytes=&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 格式化偏移量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">start</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(start);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">end</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">end</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(filesize</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,end)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">filesize</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>2.设置响应头部</p><p>​ 在获取起始、末尾的偏移量后，则需要设置响应头部了，告诉客户端响应数据的偏移量范围、响应体的大小以及文件的总大小。</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function middlware=(req,res)=&gt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">    const {range} = req.headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    if(range===undefined){</span></span>
<span class="line"><span style="color:#E1E4E8;">        // 无range属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        createReadStream(&quot;01.mp4&quot;).pipe(res)</span></span>
<span class="line"><span style="color:#E1E4E8;">        return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    // 读取文件大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    const filesize = statSync(&quot;01.mp4&quot;).size</span></span>
<span class="line"><span style="color:#E1E4E8;">    // 获取偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">    let [start,end] = range.replace(&quot;bytes=&quot;,&quot;&quot;).split(&quot;-&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">    // 格式化偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">    start = Number(start);</span></span>
<span class="line"><span style="color:#E1E4E8;">    end=end?Math.min(filesize-1,end):filesize-1</span></span>
<span class="line"><span style="color:#85E89D;">+  	const headers = {</span></span>
<span class="line"><span style="color:#85E89D;">+    	// Content-Range: 说明本次请求响应的范围以及总大小为</span></span>
<span class="line"><span style="color:#85E89D;">+    	&quot;Content-Range&quot;: \`bytes \${start}-\${end}/\${filesize}\`,</span></span>
<span class="line"><span style="color:#85E89D;">+    	// Accept-Ranges：bytes 代表了该服务器可以接受范围请求，none不支持</span></span>
<span class="line"><span style="color:#85E89D;">+    	&quot;Accept-Ranges&quot;: &quot;bytes&quot;,</span></span>
<span class="line"><span style="color:#85E89D;">+    	// Content-Length: 本次请求响应体的大小</span></span>
<span class="line"><span style="color:#85E89D;">+    	&quot;Content-Length&quot;: end + 1 - start,</span></span>
<span class="line"><span style="color:#85E89D;">+    	// 响应体类型</span></span>
<span class="line"><span style="color:#85E89D;">+    	&quot;Content-Type&quot;: &quot;video/mp4&quot;,</span></span>
<span class="line"><span style="color:#85E89D;">+    	&quot;Cache-Control&quot;: &quot;max-age=20000000&quot;,</span></span>
<span class="line"><span style="color:#85E89D;">+  	};</span></span>
<span class="line"><span style="color:#85E89D;">+  	res.writeHead(206, headers);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function middlware=(req,res)=&gt;{</span></span>
<span class="line"><span style="color:#24292E;">    const {range} = req.headers</span></span>
<span class="line"><span style="color:#24292E;">    if(range===undefined){</span></span>
<span class="line"><span style="color:#24292E;">        // 无range属性</span></span>
<span class="line"><span style="color:#24292E;">        createReadStream(&quot;01.mp4&quot;).pipe(res)</span></span>
<span class="line"><span style="color:#24292E;">        return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    // 读取文件大小</span></span>
<span class="line"><span style="color:#24292E;">    const filesize = statSync(&quot;01.mp4&quot;).size</span></span>
<span class="line"><span style="color:#24292E;">    // 获取偏移量</span></span>
<span class="line"><span style="color:#24292E;">    let [start,end] = range.replace(&quot;bytes=&quot;,&quot;&quot;).split(&quot;-&quot;)</span></span>
<span class="line"><span style="color:#24292E;">    // 格式化偏移量</span></span>
<span class="line"><span style="color:#24292E;">    start = Number(start);</span></span>
<span class="line"><span style="color:#24292E;">    end=end?Math.min(filesize-1,end):filesize-1</span></span>
<span class="line"><span style="color:#22863A;">+  	const headers = {</span></span>
<span class="line"><span style="color:#22863A;">+    	// Content-Range: 说明本次请求响应的范围以及总大小为</span></span>
<span class="line"><span style="color:#22863A;">+    	&quot;Content-Range&quot;: \`bytes \${start}-\${end}/\${filesize}\`,</span></span>
<span class="line"><span style="color:#22863A;">+    	// Accept-Ranges：bytes 代表了该服务器可以接受范围请求，none不支持</span></span>
<span class="line"><span style="color:#22863A;">+    	&quot;Accept-Ranges&quot;: &quot;bytes&quot;,</span></span>
<span class="line"><span style="color:#22863A;">+    	// Content-Length: 本次请求响应体的大小</span></span>
<span class="line"><span style="color:#22863A;">+    	&quot;Content-Length&quot;: end + 1 - start,</span></span>
<span class="line"><span style="color:#22863A;">+    	// 响应体类型</span></span>
<span class="line"><span style="color:#22863A;">+    	&quot;Content-Type&quot;: &quot;video/mp4&quot;,</span></span>
<span class="line"><span style="color:#22863A;">+    	&quot;Cache-Control&quot;: &quot;max-age=20000000&quot;,</span></span>
<span class="line"><span style="color:#22863A;">+  	};</span></span>
<span class="line"><span style="color:#22863A;">+  	res.writeHead(206, headers);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>3.响应对应范围的数据</p><p>​ 有了起始、末尾偏移量，则我们可以通过<code>createReadStream</code>可读流来响应数据，其api天生支持读取start到end的数据，并自动关闭文件。</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function middlware=(req,res)=&gt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">    const {range} = req.headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    if(range===undefined){</span></span>
<span class="line"><span style="color:#E1E4E8;">        // 无range属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        createReadStream(&quot;01.mp4&quot;).pipe(res)</span></span>
<span class="line"><span style="color:#E1E4E8;">        return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    // 读取文件大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    const filesize = statSync(&quot;01.mp4&quot;).size</span></span>
<span class="line"><span style="color:#E1E4E8;">    // 获取偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">    let [start,end] = range.replace(&quot;bytes=&quot;,&quot;&quot;).split(&quot;-&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">    // 格式化偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">    start = Number(start);</span></span>
<span class="line"><span style="color:#E1E4E8;">    end=end?Math.min(filesize-1,end):filesize-1</span></span>
<span class="line"><span style="color:#E1E4E8;">  	const headers = {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	// Content-Range: 说明本次请求响应的范围以及总大小为</span></span>
<span class="line"><span style="color:#E1E4E8;">    	&quot;Content-Range&quot;: \`bytes \${start}-\${end}/\${filesize}\`,</span></span>
<span class="line"><span style="color:#E1E4E8;">    	// Accept-Ranges：bytes 代表了该服务器可以接受范围请求，none不支持</span></span>
<span class="line"><span style="color:#E1E4E8;">    	&quot;Accept-Ranges&quot;: &quot;bytes&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    	// Content-Length: 本次请求响应体的大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    	&quot;Content-Length&quot;: end + 1 - start,</span></span>
<span class="line"><span style="color:#E1E4E8;">    	// 响应体类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    	&quot;Content-Type&quot;: &quot;video/mp4&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    	&quot;Cache-Control&quot;: &quot;max-age=20000000&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  	};</span></span>
<span class="line"><span style="color:#E1E4E8;">  	res.writeHead(206, headers);</span></span>
<span class="line"><span style="color:#85E89D;">+	createReadStream(&quot;01.mp4&quot;, { start, end }).pipe(res);  	</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function middlware=(req,res)=&gt;{</span></span>
<span class="line"><span style="color:#24292E;">    const {range} = req.headers</span></span>
<span class="line"><span style="color:#24292E;">    if(range===undefined){</span></span>
<span class="line"><span style="color:#24292E;">        // 无range属性</span></span>
<span class="line"><span style="color:#24292E;">        createReadStream(&quot;01.mp4&quot;).pipe(res)</span></span>
<span class="line"><span style="color:#24292E;">        return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    // 读取文件大小</span></span>
<span class="line"><span style="color:#24292E;">    const filesize = statSync(&quot;01.mp4&quot;).size</span></span>
<span class="line"><span style="color:#24292E;">    // 获取偏移量</span></span>
<span class="line"><span style="color:#24292E;">    let [start,end] = range.replace(&quot;bytes=&quot;,&quot;&quot;).split(&quot;-&quot;)</span></span>
<span class="line"><span style="color:#24292E;">    // 格式化偏移量</span></span>
<span class="line"><span style="color:#24292E;">    start = Number(start);</span></span>
<span class="line"><span style="color:#24292E;">    end=end?Math.min(filesize-1,end):filesize-1</span></span>
<span class="line"><span style="color:#24292E;">  	const headers = {</span></span>
<span class="line"><span style="color:#24292E;">    	// Content-Range: 说明本次请求响应的范围以及总大小为</span></span>
<span class="line"><span style="color:#24292E;">    	&quot;Content-Range&quot;: \`bytes \${start}-\${end}/\${filesize}\`,</span></span>
<span class="line"><span style="color:#24292E;">    	// Accept-Ranges：bytes 代表了该服务器可以接受范围请求，none不支持</span></span>
<span class="line"><span style="color:#24292E;">    	&quot;Accept-Ranges&quot;: &quot;bytes&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    	// Content-Length: 本次请求响应体的大小</span></span>
<span class="line"><span style="color:#24292E;">    	&quot;Content-Length&quot;: end + 1 - start,</span></span>
<span class="line"><span style="color:#24292E;">    	// 响应体类型</span></span>
<span class="line"><span style="color:#24292E;">    	&quot;Content-Type&quot;: &quot;video/mp4&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    	&quot;Cache-Control&quot;: &quot;max-age=20000000&quot;,</span></span>
<span class="line"><span style="color:#24292E;">  	};</span></span>
<span class="line"><span style="color:#24292E;">  	res.writeHead(206, headers);</span></span>
<span class="line"><span style="color:#22863A;">+	createReadStream(&quot;01.mp4&quot;, { start, end }).pipe(res);  	</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>4.每次响应固定长度的数据</p><p>​ 若想要支持每次都响应固定长度的数据，可以自己设定end的值，即可固定每次响应的数据大小。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">middlware</span><span style="color:#E1E4E8;">=(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> {</span><span style="color:#FFAB70;">range</span><span style="color:#E1E4E8;">} = </span><span style="color:#B392F0;">req</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">range</span><span style="color:#E1E4E8;">===undefined){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 无range属性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;01.mp4&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(res)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 每次读取文件的长度为 1mb</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">chunkSize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">1024</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取文件大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">filesize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">statSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;01.mp4&quot;</span><span style="color:#E1E4E8;">).size</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(range.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bytes=&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">end</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(filesize</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,start</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">chunkSize)</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">headers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// Content-Range: 说明本次请求响应的范围以及总大小为</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#9ECBFF;">&quot;Content-Range&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\`bytes \${</span><span style="color:#E1E4E8;">start</span><span style="color:#9ECBFF;">}-\${</span><span style="color:#E1E4E8;">end</span><span style="color:#9ECBFF;">}/\${</span><span style="color:#E1E4E8;">filesize</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// Accept-Ranges：bytes 代表了该服务器可以接受范围请求，none不支持</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#9ECBFF;">&quot;Accept-Ranges&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;bytes&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// Content-Length: 本次请求响应体的大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#9ECBFF;">&quot;Content-Length&quot;</span><span style="color:#E1E4E8;">: chunkSize,</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// 响应体类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;video/mp4&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#9ECBFF;">&quot;Cache-Control&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;max-age=20000000&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  	};</span></span>
<span class="line"><span style="color:#E1E4E8;">  	</span><span style="color:#B392F0;">res</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(206, </span><span style="color:#FFAB70;">headers</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;01.mp4&quot;</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">end</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">);  	</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middlware</span><span style="color:#24292E;">=(</span><span style="color:#E36209;">req</span><span style="color:#24292E;">,</span><span style="color:#E36209;">res</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">range</span><span style="color:#24292E;">} = </span><span style="color:#6F42C1;">req</span><span style="color:#24292E;">.</span><span style="color:#E36209;">headers</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">if</span><span style="color:#24292E;">(</span><span style="color:#E36209;">range</span><span style="color:#24292E;">===undefined){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 无range属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;01.mp4&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(res)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 每次读取文件的长度为 1mb</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">chunkSize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">1024</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取文件大小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">filesize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">statSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;01.mp4&quot;</span><span style="color:#24292E;">).size</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取偏移量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">start</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(range.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bytes=&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">end</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(filesize</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,start</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">chunkSize)</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">headers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// Content-Range: 说明本次请求响应的范围以及总大小为</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#032F62;">&quot;Content-Range&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\`bytes \${</span><span style="color:#24292E;">start</span><span style="color:#032F62;">}-\${</span><span style="color:#24292E;">end</span><span style="color:#032F62;">}/\${</span><span style="color:#24292E;">filesize</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// Accept-Ranges：bytes 代表了该服务器可以接受范围请求，none不支持</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#032F62;">&quot;Accept-Ranges&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;bytes&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// Content-Length: 本次请求响应体的大小</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#032F62;">&quot;Content-Length&quot;</span><span style="color:#24292E;">: chunkSize,</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// 响应体类型</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;video/mp4&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#032F62;">&quot;Cache-Control&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;max-age=20000000&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  	};</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6F42C1;">res</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">writeHead</span><span style="color:#24292E;">(206, </span><span style="color:#E36209;">headers</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;01.mp4&quot;</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#E36209;">end</span><span style="color:#24292E;"> }).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;">);  	</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>文件结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">project</span></span>
<span class="line"><span style="color:#e1e4e8;">│  package.json</span></span>
<span class="line"><span style="color:#e1e4e8;">├─client</span></span>
<span class="line"><span style="color:#e1e4e8;">│      index.html </span></span>
<span class="line"><span style="color:#e1e4e8;">├─src</span></span>
<span class="line"><span style="color:#e1e4e8;">│      index.js    </span></span>
<span class="line"><span style="color:#e1e4e8;">└─static</span></span>
<span class="line"><span style="color:#e1e4e8;">    ├─audio</span></span>
<span class="line"><span style="color:#e1e4e8;">    │      distortion.mp3   </span></span>
<span class="line"><span style="color:#e1e4e8;">    └─video</span></span>
<span class="line"><span style="color:#e1e4e8;">            01.mp4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">project</span></span>
<span class="line"><span style="color:#24292e;">│  package.json</span></span>
<span class="line"><span style="color:#24292e;">├─client</span></span>
<span class="line"><span style="color:#24292e;">│      index.html </span></span>
<span class="line"><span style="color:#24292e;">├─src</span></span>
<span class="line"><span style="color:#24292e;">│      index.js    </span></span>
<span class="line"><span style="color:#24292e;">└─static</span></span>
<span class="line"><span style="color:#24292e;">    ├─audio</span></span>
<span class="line"><span style="color:#24292e;">    │      distortion.mp3   </span></span>
<span class="line"><span style="color:#24292e;">    └─video</span></span>
<span class="line"><span style="color:#24292e;">            01.mp4</span></span></code></pre></div><p>源码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">createServer</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">createReadStream</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">existsSync</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">statSync</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;node:fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">R</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;node:path&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{import(&#39;http&#39;).IncomingMessage}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">req</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{import(&#39;http&#39;).ServerResponse}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">res</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">middleware</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (req.url </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">handleClient</span><span style="color:#E1E4E8;">(req, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (req.url.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/static&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">hanldeStaticWithStream</span><span style="color:#E1E4E8;">(req, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{import(&#39;http&#39;).IncomingMessage}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">req</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{import(&#39;http&#39;).ServerResponse}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">res</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleClient</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">R</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;../client/index.html&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 通过媒体流来响应文件</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{import(&#39;http&#39;).IncomingMessage}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">req</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{import(&#39;http&#39;).ServerResponse}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">res</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hanldeStaticWithStream</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">req.headers.range) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 未携带请求头部的range，直接返回整个文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">handleStatic</span><span style="color:#E1E4E8;">(req, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 每次响应的片段大小 1mb</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkSize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 解码出真实的请求路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decodeURI</span><span style="color:#E1E4E8;">(req.url);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filepath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">R</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">\`..\${</span><span style="color:#E1E4E8;">path</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">existsSync</span><span style="color:#E1E4E8;">(filepath)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 文件不存在</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;content-type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;text/plain;charset=utf-8&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Error:The File path is not found.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">FilePath:\${</span><span style="color:#E1E4E8;">path</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 文件大小</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filesize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">statSync</span><span style="color:#E1E4E8;">(filepath).size;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 解析出请求头部中的偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 请求头部的range属性，包含了本次请求的文件的开始偏移量和结束偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">position</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.headers.range</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(req.headers.range.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bytes=&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据浏览器自适应返回对应大小的片段</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取请求头部中range的起始和末尾偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// const [start, end] = position.map((item, index) =&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   if (item.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     return Number(item);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   } else {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     // 接收到空串</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     if (index === 0) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       // 下标为0，为起始偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       return 0;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     } else {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       // 下标不为0，则为末尾偏移量</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       // 结束偏移量默认为文件大小长度减一，因为在内存中某个文件的初始偏移量就是0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//       return filesize - 1;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//   }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 固定返回chunkSize大小的片段</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">(position[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">end</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(start </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> chunkSize, filesize </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">headers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Content-Range: 说明本次请求响应的范围以及总大小为</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Content-Range&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\`bytes \${</span><span style="color:#E1E4E8;">start</span><span style="color:#9ECBFF;">}-\${</span><span style="color:#E1E4E8;">end</span><span style="color:#9ECBFF;">}/\${</span><span style="color:#E1E4E8;">filesize</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Accept-Ranges：bytes 代表了该服务器可以接受范围请求，none不支持</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Accept-Ranges&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;bytes&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Content-Length: 本次请求响应体的大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Content-Length&quot;</span><span style="color:#E1E4E8;">: end </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 响应体类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;video/mp4&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Cache-Control&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;max-age=20000000&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">206</span><span style="color:#E1E4E8;">, headers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(filepath, { start, end }).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 直接响应文件</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{import(&#39;http&#39;).IncomingMessage}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">req</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{import(&#39;http&#39;).ServerResponse}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">res</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleStatic</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decodeURI</span><span style="color:#E1E4E8;">(req.url);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filepath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">R</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">\`..\${</span><span style="color:#E1E4E8;">path</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">existsSync</span><span style="color:#E1E4E8;">(filepath)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 告诉浏览器将文件内嵌入网页中</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Disposition&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;inline&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Content-length：告诉浏览器文件大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Length&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">statSync</span><span style="color:#E1E4E8;">(filepath).size);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置响应体类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (filepath.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.mp3&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;audio/mpeg&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (filepath.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.mp4&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;video/mp4&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(filepath).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;content-type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;text/plain;charset=utf-8&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Error:The File path is not found.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">FilePath:\${</span><span style="color:#E1E4E8;">path</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(middleware).</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">createServer</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">createReadStream</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">existsSync</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">statSync</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;node:fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">R</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;node:path&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{import(&#39;http&#39;).IncomingMessage}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">req</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{import(&#39;http&#39;).ServerResponse}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">res</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middleware</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (req.url </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">handleClient</span><span style="color:#24292E;">(req, res);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (req.url.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/static&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">hanldeStaticWithStream</span><span style="color:#24292E;">(req, res);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{import(&#39;http&#39;).IncomingMessage}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">req</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{import(&#39;http&#39;).ServerResponse}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">res</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleClient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">_</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">R</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;../client/index.html&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 通过媒体流来响应文件</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{import(&#39;http&#39;).IncomingMessage}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">req</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{import(&#39;http&#39;).ServerResponse}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">res</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hanldeStaticWithStream</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">req.headers.range) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 未携带请求头部的range，直接返回整个文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">handleStatic</span><span style="color:#24292E;">(req, res);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 每次响应的片段大小 1mb</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunkSize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 解码出真实的请求路径</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decodeURI</span><span style="color:#24292E;">(req.url);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 文件路径</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filepath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">R</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">\`..\${</span><span style="color:#24292E;">path</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">existsSync</span><span style="color:#24292E;">(filepath)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 文件不存在</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">writeHead</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;content-type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;text/plain;charset=utf-8&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Error:The File path is not found.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">FilePath:\${</span><span style="color:#24292E;">path</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 文件大小</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filesize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">statSync</span><span style="color:#24292E;">(filepath).size;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 解析出请求头部中的偏移量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 请求头部的range属性，包含了本次请求的文件的开始偏移量和结束偏移量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">position</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.headers.range</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(req.headers.range.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bytes=&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 根据浏览器自适应返回对应大小的片段</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取请求头部中range的起始和末尾偏移量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// const [start, end] = position.map((item, index) =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   if (item.length) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     return Number(item);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   } else {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     // 接收到空串</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     if (index === 0) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       // 下标为0，为起始偏移量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       return 0;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     } else {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       // 下标不为0，则为末尾偏移量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       // 结束偏移量默认为文件大小长度减一，因为在内存中某个文件的初始偏移量就是0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//       return filesize - 1;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 固定返回chunkSize大小的片段</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">start</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">(position[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">end</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> chunkSize, filesize </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">headers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Content-Range: 说明本次请求响应的范围以及总大小为</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Content-Range&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\`bytes \${</span><span style="color:#24292E;">start</span><span style="color:#032F62;">}-\${</span><span style="color:#24292E;">end</span><span style="color:#032F62;">}/\${</span><span style="color:#24292E;">filesize</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Accept-Ranges：bytes 代表了该服务器可以接受范围请求，none不支持</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Accept-Ranges&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;bytes&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Content-Length: 本次请求响应体的大小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Content-Length&quot;</span><span style="color:#24292E;">: end </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 响应体类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;video/mp4&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Cache-Control&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;max-age=20000000&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">writeHead</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">206</span><span style="color:#24292E;">, headers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(filepath, { start, end }).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 直接响应文件</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{import(&#39;http&#39;).IncomingMessage}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">req</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{import(&#39;http&#39;).ServerResponse}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">res</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleStatic</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decodeURI</span><span style="color:#24292E;">(req.url);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filepath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">R</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">\`..\${</span><span style="color:#24292E;">path</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">existsSync</span><span style="color:#24292E;">(filepath)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 告诉浏览器将文件内嵌入网页中</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Disposition&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;inline&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Content-length：告诉浏览器文件大小</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Length&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">statSync</span><span style="color:#24292E;">(filepath).size);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置响应体类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (filepath.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.mp3&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;audio/mpeg&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (filepath.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.mp4&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;video/mp4&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(filepath).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">writeHead</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;content-type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;text/plain;charset=utf-8&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Error:The File path is not found.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">FilePath:\${</span><span style="color:#24292E;">path</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(middleware).</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span></code></pre></div>`,37),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const q=s(l,[["render",t]]);export{d as __pageData,q as default};

import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.f98883f0.js";const _=JSON.parse('{"title":"给 DOM 元素绑定自定义事件","description":"","frontmatter":{},"headers":[],"relativePath":"question/js/11.md","filePath":"question/js/11.md","lastUpdated":1699188084000}'),p={name:"question/js/11.md"},l=o(`<h1 id="给-dom-元素绑定自定义事件" tabindex="-1">给 DOM 元素绑定自定义事件 <a class="header-anchor" href="#给-dom-元素绑定自定义事件" aria-label="Permalink to &quot;给 DOM 元素绑定自定义事件&quot;">​</a></h1><p>​ 通过给 DOM 元素绑定自定义事件，再通过<code>dispatchEvent</code>来触发事件，即可完成对自定义事件的监听。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 绑定自定义事件</span></span>
<span class="line"><span style="color:#E1E4E8;">button.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 分发自定义事件</span></span>
<span class="line"><span style="color:#E1E4E8;">button.</span><span style="color:#B392F0;">dispatchEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Event</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 绑定自定义事件</span></span>
<span class="line"><span style="color:#24292E;">button.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 分发自定义事件</span></span>
<span class="line"><span style="color:#24292E;">button.</span><span style="color:#6F42C1;">dispatchEvent</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Event</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div>`,3),e=[l];function t(c,r,E,i,y,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{_ as __pageData,h as default};
